import funkin.modding.base.ScriptedFlxSpriteGroup;

import haxe.ui.containers.windows.WindowManager;

import funkin.data.story.level.LevelRegistry;

import haxe.ui.RuntimeComponentBuilder;

import funkin.graphics.FunkinSprite;

import funkin.ui.FullScreenScaleMode;

import haxe.ui.data.ArrayDataSource;

import funkin.ui.MusicBeatState;

import funkin.ui.story.Level;

import funkin.util.Constants;

import flixel.util.FlxColor;

import flixel.util.FlxTimer;


import funkin.input.Cursor;

import flixel.text.FlxText;

import flixel.FlxCamera;
import flixel.FlxG;

import haxe.Json;

import StringTools;
import Reflect;
import Math;


import haxe.ui.containers.dialogs.OpenFileDialog;
import haxe.ui.containers.dialogs.FileDialogTypes;

using StringTools;

class LevelEditor extends MusicBeatState {

    public static var instance:LevelEditor;

    // -- Camears -- \\
    public var UI_CAMERA:FlxCamera;
    public var LEVEL_CAMERA:FlxCamera;

    // -- Sprites -- \\
    public var titleAssetSprite:FunkinSprite;
    public var levelBackground:FunkinSprite;
    public var blackBar:FunkinSprite;
    public var levelProps = [];

    // -- Overlays -- \\
    public var titleAssetOverlay:FunkinSprite;

    // -- Text -- \\
    var levelTitleText:FlxText;
    var scoreText:FlxText;
    var tracklistText:FlxText;

    // -- UI Elements -- \\
    var MENU_BAR;
    var LEVEL_DATA;
    
    // -- Other Stuff -- \\
    public var WINDOW_MANAGER:WindowManager = new WindowManager(); // nigger - genzu

    public var LEVEL_REGISTRY = Map.new();
    
    public var SELECTED_LEVEL:Level;


    function new() {
        super('LevelEditor');
    }

    function create() {
        super.create();
        Cursor.show();

        instance = this;

        initStyles();

        // -- Intialize Camears -- \\
        LEVEL_CAMERA = new FlxCamera();
        LEVEL_CAMERA.bgColor = FlxColor.TRANSPARENT;
        FlxG.cameras.add(LEVEL_CAMERA, false);
        
        UI_CAMERA = new FlxCamera();
        UI_CAMERA.bgColor = FlxColor.TRANSPARENT;
        FlxG.cameras.add(UI_CAMERA, true);

        // -- UI Data == \\
        MENU_BAR = RuntimeComponentBuilder.build(Paths.ui("level-editor/menubar"));
        MENU_BAR.findComponent("menuBarTitle").text = LevelEditorData.EDITOR_TITLE + " v" + LevelEditorData.EDITOR_VERSION;
        add(MENU_BAR);

        LEVEL_DATA = RuntimeComponentBuilder.build(Paths.ui("level-editor/windows/levelData"));   
        WINDOW_MANAGER.addWindow(LEVEL_DATA);
        LEVEL_DATA.screenCenter();
        LEVEL_DATA.x = FlxG.width - LEVEL_DATA.width - 20;

        var editPropButton = LEVEL_DATA.findComponent("editProp");
        var editPropCallback = ()->{
            var EDIT_PROP = RuntimeComponentBuilder.build(Paths.ui("level-editor/windows/editProp"));   
            WINDOW_MANAGER.addWindow(EDIT_PROP);
            EDIT_PROP.screenCenter();
            EDIT_PROP.x = 20;
        }
        editPropButton.onClick = editPropCallback;

        var levelDropdown = LEVEL_DATA.findComponent("levelDropdown");
        var levelDropdownCallback = ()->{
            if (levelDropdown.selectedItem == null || levelDropdown.selectedItem.text == "Select a Level (Week)") return;
            // -- Get Selected Level Data -- \\
            SELECTED_LEVEL = new Level('week1');
            SELECTED_LEVEL._data = LEVEL_REGISTRY.get(levelDropdown.selectedItem.id);
            loadLevel(SELECTED_LEVEL);

            // -- Set UI To Selected Data -- \\
            LEVEL_DATA.findComponent("levelName").text = SELECTED_LEVEL.getTitle();

            LEVEL_DATA.findComponent("titleAsset").text = SELECTED_LEVEL._data.titleAsset.replace("storymenu/titles/", "") + "";

            LEVEL_DATA.findComponent("backgroundAsset").text = SELECTED_LEVEL._data.background;

            LEVEL_DATA.findComponent("levelSongs").text = SELECTED_LEVEL.getSongs().join(", ");

            LEVEL_DATA.findComponent("levelIsVisible").selected = SELECTED_LEVEL.isVisible();

            LEVEL_DATA.findComponent("levelProps").dataSource.clear();
            for (i in SELECTED_LEVEL._data.props) {
                LEVEL_DATA.findComponent("levelProps").dataSource.add(
                    {
                        text: NovaConverters.capitalize(i.assetPath.split("/").pop()),
                        data: i
                    }
                );
            }
        }
        levelDropdown.onChange = levelDropdownCallback;

        var levelNameField = LEVEL_DATA.findComponent("levelName");
        var levelNameFieldCallback = ()->{
            SELECTED_LEVEL._data.name = levelNameField.text;
            updateText();
        }
        levelNameField.onChange = levelNameFieldCallback;

        var titleAsset = LEVEL_DATA.findComponent("titleAsset");
        var titleAssetCallback = ()->{
            titleAssetOverlay.visible = false;
            if (titleAsset.text == "") return;
            if (NovaUtils.checkImageExists("storymenu/titles/" + titleAsset.text)) {
                SELECTED_LEVEL._data.titleAsset = "storymenu/titles/" + titleAsset.text;
                updateTitleSprite();
            } else {
                titleAssetOverlay.visible = true;
            }
        }
        titleAsset.onChange = titleAssetCallback;

        titleAssetOverlay = new FunkinSprite(113, 110).makeGraphic(titleAsset.width - 2, titleAsset.height - 2, FlxColor.RED);
        titleAssetOverlay.blend = 0;
        titleAssetOverlay.alpha = 0.5;
        titleAssetOverlay.visible = false;
        LEVEL_DATA.add(titleAssetOverlay);

        var backgroundAssetE = LEVEL_DATA.findComponent("backgroundAsset");
        var backgroundAssetECallback = ()->{
            SELECTED_LEVEL._data.background = backgroundAssetE.text;
            updateLevelBackground();
        }
        backgroundAssetE.onChange = backgroundAssetECallback;

        var levelSongs = LEVEL_DATA.findComponent("levelSongs");
        var levelSongsCallback = ()->{
            var songList = levelSongs.text;
            songList = songList.replace(" ", "");
            SELECTED_LEVEL._data.songs = songList.split(",");
            updateText(); 
        }
        levelSongs.onChange = levelSongsCallback;

        var first;
        var index = 0;
        for (i in LevelRegistry.instance.listSortedLevelIds()) {
            if (LevelRegistry.instance.listBaseGameEntryIds().contains(i)) continue;
            var level = new Level(i);
            LEVEL_DATA.findComponent("levelDropdown").dataSource.add({text: level.getTitle(), id: i});
            if (index == 0) first = ()->LEVEL_DATA.findComponent("levelDropdown").selectedItem = {text: level.getTitle(), id: i}; 
            LEVEL_REGISTRY.set(i, level._data);
            index++; 
        }
        new FlxTimer().start(0.01, first);
        
    }

    function update(e) {
        super.update(e);        
        get_conductorInUse().update();

        if (FlxG.keys.justPressed.ENTER) {

        }

        for (i in [titleAssetSprite, levelBackground, blackBar, tracklistText, scoreText, levelTitleText].concat(levelProps)) {
            if (i == null) continue;
            i.cameras = [LEVEL_CAMERA];
        }

        /* if (FlxG.keys.justPressed.I) {
            var dialog = new OpenFileDialog();
            dialog.options = {
                readContents: true,
                title: "Open Image File",
                readAsBinary: true,
                extensions: FileDialogTypes.TEXTS
            };
           /*  dialog.onDialogClosed = function(event) {
                if (event.button == DialogButton.OK) {
                    updateTabs(dialog.selectedFiles[0].bytes);
                }
            } * /
            dialog.show();
        } */

        /* if (LEVEL_DATA != null) {
            
        } */
    }

    override function beatHit() {
        super.beatHit();
        var curBeat = get_conductorInUse().currentBeat;

        for (i in levelProps) {
            i.danceEvery *= 2;
            if (i == null) continue;
            if (i.danceEvery > 0 && (curBeat % (i.danceEvery)) == 0) {
                i.dance(i.shouldBop);
            }
            i.danceEvery /= 2;
        }
    }
    override function stepHit(e) {
        super.stepHit(e);
        var curStep = get_conductorInUse().currentStep;

        
    }

    function destroy() {
        super.destroy();
        Cursor.hide();
    }

    function loadLevel(level) {
        for (i in [titleAssetSprite, levelBackground, blackBar, tracklistText, scoreText, levelTitleText, levelProps].concat(levelProps))
            if (members.contains(i))
                remove(i);

        
        levelBackground = level.buildBackground();
        levelBackground.y = MENU_BAR.height + 56;
        
        blackBar = new FunkinSprite(levelBackground.x, 0).makeSolidColor(FlxG.width, Std.int(400 + levelBackground.y), FlxColor.BLACK);
        add(blackBar);
        add(levelBackground);
        
        titleAssetSprite = level.buildTitleGraphic();
        titleAssetSprite.updateHitbox();
        titleAssetSprite.screenCenter();
        titleAssetSprite.y += Std.int(levelBackground.y + levelBackground.height + 10 + MENU_BAR.height)/2;
        titleAssetSprite.y -= 30;
        add(titleAssetSprite);

        tracklistText = new FlxText(FlxG.width * 0.05, levelBackground.x + levelBackground.height + 100 + MENU_BAR.height, 0, "Tracks", 32);
        tracklistText.setFormat('VCR OSD Mono', 32);
        tracklistText.alignment = 'center';
        tracklistText.color = 0xFFE55777;
        add(tracklistText);

        scoreText = new FlxText(Math.max(FullScreenScaleMode.gameNotchSize.x, 10), 10 + MENU_BAR.height, 0, 'HIGH SCORE: XXXXXXXX');
        scoreText.setFormat('VCR OSD Mono', 32);
        add(scoreText);

        levelTitleText = new FlxText(Math.max((FlxG.width * 0.7), FlxG.width - FullScreenScaleMode.gameNotchSize.x), 10 + MENU_BAR.height, 0, level.getTitle());
        levelTitleText.setFormat('VCR OSD Mono', 32, FlxColor.WHITE, 'right');
        levelTitleText.alpha = 0.7;
        levelTitleText.updateHitbox();
        levelTitleText.x = FlxG.width - levelTitleText.width - Math.max(FullScreenScaleMode.gameNotchSize.x, 10);
        add(levelTitleText);

        updateText();
        updateProps();
    }

    function updateText() {
        tracklistText.text = 'TRACKS\n\n';
        tracklistText.text += SELECTED_LEVEL.getSongDisplayNames('normal').join('\n');

        tracklistText.screenCenter(0x01);
        tracklistText.x -= (FlxG.width * 0.35);

        levelTitleText.text = SELECTED_LEVEL.getTitle();
        levelTitleText.updateHitbox();
        levelTitleText.x = FlxG.width - levelTitleText.width - Math.max(FullScreenScaleMode.gameNotchSize.x, 10);

        /* var levelScore:Null<SaveScoreData> = Save.instance.getLevelScore(currentLevelId, currentDifficultyId);
        highScore = levelScore?.score ?? 0; */
        // levelScore.accuracy
    }

    function updateTitleSprite() {
        remove(titleAssetSprite);
        titleAssetSprite = SELECTED_LEVEL.buildTitleGraphic();
        titleAssetSprite.updateHitbox();
        titleAssetSprite.screenCenter();
        titleAssetSprite.y += Std.int(levelBackground.y + levelBackground.height + 10 + MENU_BAR.height)/2;
        titleAssetSprite.y -= 30;
        add(titleAssetSprite);
    }
    
    function updateProps() {
        levelProps = [];
        for (prop in SELECTED_LEVEL.buildProps()) {
            levelProps.push(prop);
        }
        for (i in levelProps) {
            /* i.x += (FullScreenScaleMode.gameCutoutSize.x / 4);
            i.onCreate();
            i.applyData(); */
            i.y += MENU_BAR.height;
            add(i);
            i.onCreate();
        }
    }

    function updateLevelBackground() {
        remove(levelBackground);
        remove(blackBar);
        levelBackground = SELECTED_LEVEL.buildBackground();
        levelBackground.y = MENU_BAR.height + 56;
        
        blackBar = new FunkinSprite(levelBackground.x, 0).makeSolidColor(FlxG.width, Std.int(400 + levelBackground.y), FlxColor.BLACK);
        add(blackBar);
        add(levelBackground);
    }

    function initStyles() {
        add(RuntimeComponentBuilder.build(Paths.ui("level-editor/styles/main")));
    }

    /* function formatJSON(string) {
        string = string.replace()
        return string;
    } */
}