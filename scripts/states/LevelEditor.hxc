import funkin.modding.base.ScriptedFlxSpriteGroup;

import haxe.ui.containers.windows.WindowManager;

import funkin.data.story.level.LevelRegistry;

import haxe.ui.RuntimeComponentBuilder;

import funkin.graphics.FunkinSprite;

import funkin.ui.FullScreenScaleMode;

import haxe.ui.data.ArrayDataSource;

import funkin.audio.FunkinSound;

import funkin.ui.MusicBeatState;

import funkin.ui.story.LevelProp;
import funkin.ui.story.Level;

import funkin.util.Constants;

import flixel.util.FlxColor;

import flixel.util.FlxTimer;

import funkin.input.Cursor;

import flixel.text.FlxText;

import flixel.FlxCamera;
import flixel.FlxG;

import haxe.Json;

import StringTools;
import Reflect;
import Math;


import haxe.ui.containers.dialogs.OpenFileDialog;
import haxe.ui.containers.dialogs.FileDialogTypes;

using StringTools;

class LevelEditor extends MusicBeatState {

    public static var instance:LevelEditor;

    // -- Cameras -- \\
    public var UI_CAMERA:FlxCamera;
    public var LEVEL_CAMERA:FlxCamera;

    // -- Sprites -- \\
    public var titleAssetSprite:FunkinSprite;
    public var levelBackground:FunkinSprite;
    public var blackBar:FunkinSprite;
    public var levelProps = [];

    // -- Overlays -- \\
    public var titleAssetOverlay:FunkinSprite;

    // -- Text -- \\
    var levelTitleText:FlxText;
    var scoreText:FlxText;
    var tracklistText:FlxText;

    // -- UI Elements -- \\
    var MENU_BAR;
    var LEVEL_DATA;
    var EDIT_PROP;
    
    // -- Other Stuff -- \\
    public var WINDOW_MANAGER:WindowManager = new WindowManager(); // nigger - genzu

    public var LEVEL_REGISTRY = Map.new();
    
    public var SELECTED_LEVEL:Level;
    public var SELECTED_PROP:LevelProp;


    function new() {
        super('LevelEditor');
    }

    function create() {
        super.create();
        Cursor.show();

        instance = this;

        initStyles();

        // -- Intialize Camears -- \\
        LEVEL_CAMERA = new FlxCamera();
        LEVEL_CAMERA.bgColor = FlxColor.TRANSPARENT;
        FlxG.cameras.add(LEVEL_CAMERA, false);
        
        UI_CAMERA = new FlxCamera();
        UI_CAMERA.bgColor = FlxColor.TRANSPARENT;
        FlxG.cameras.add(UI_CAMERA, true);

        // -- UI Data == \\
        MENU_BAR = RuntimeComponentBuilder.build(Paths.ui("level-editor/menubar"));
        MENU_BAR.findComponent("menuBarTitle").text = LevelEditorData.EDITOR_TITLE + " v" + LevelEditorData.EDITOR_VERSION;
        add(MENU_BAR);

        LEVEL_DATA = RuntimeComponentBuilder.build(Paths.ui("level-editor/windows/levelData"));   
        WINDOW_MANAGER.addWindow(LEVEL_DATA);
        LEVEL_DATA.screenCenter();
        LEVEL_DATA.x = FlxG.width - LEVEL_DATA.width - 20;
        LEVEL_DATA.y += MENU_BAR.height/2;

        var editPropButton = LEVEL_DATA.findComponent("editProp");
        var editPropCallback = ()->{ 
            if (SELECTED_PROP == null) return;
            LEVEL_DATA.disabled = true;
            EDIT_PROP = RuntimeComponentBuilder.build(Paths.ui("level-editor/windows/editProp"));   
            WINDOW_MANAGER.addWindow(EDIT_PROP);
            EDIT_PROP.screenCenter();
            EDIT_PROP.x = 20;
            EDIT_PROP.y += MENU_BAR.height/2;

            // EDIT_PROP.addComponent(RuntimeComponentBuilder.build(Paths.ui("level-editor/parts/idlePart")));
            // EDIT_PROP.addComponent(RuntimeComponentBuilder.build(Paths.ui("level-editor/parts/footerPart")));

            var dataToApply = {
                assetPath: SELECTED_PROP.propData.assetPath.replace("storymenu/props/", ""),
                scale: SELECTED_PROP.propData.scale,
                alpha: SELECTED_PROP.propData.alpha,
                danceEvery: SELECTED_PROP.propData.danceEvery,
                offsets: [
                    SELECTED_PROP.propData.offsets[0],
                    SELECTED_PROP.propData.offsets[1]
                ],
                isPixel: SELECTED_PROP.propData.isPixel,
                animations: SELECTED_PROP.propData.animations
            }

            EDIT_PROP.findComponent("assetPath").text = SELECTED_PROP.propData.assetPath.replace("storymenu/props/", "");
            EDIT_PROP.findComponent("scale").pos = SELECTED_PROP.propData.scale;
            EDIT_PROP.findComponent("alpha").pos = SELECTED_PROP.propData.alpha;
            EDIT_PROP.findComponent("danceEvery").pos = SELECTED_PROP.propData.danceEvery;
            EDIT_PROP.findComponent("offsetX").pos = SELECTED_PROP.propData.offsets[0];
            EDIT_PROP.findComponent("offsetY").pos = SELECTED_PROP.propData.offsets[1];
            EDIT_PROP.findComponent("isPixel").selected = SELECTED_PROP.propData.isPixel;
            EDIT_PROP.findComponent("hasConfirmAnim").selected = false;
            var refreshAnimations = ()->{
                for (w in EDIT_PROP.findComponent('ac1').members) {
                    for (o in 0...100) {
                        for (i in 0...100) {
                            EDIT_PROP.findComponent('ac1').removeComponentAt(i);
                        }
                    }
                }

                var applyData = (name, i) -> {
                    EDIT_PROP.findComponent(name + 'Prefix').text = i.prefix;
                    EDIT_PROP.findComponent(name + 'Indices').text = i.frameIndices.join(", ");
                    EDIT_PROP.findComponent(name + 'OffsetX').pos = i.offsets[0];
                    EDIT_PROP.findComponent(name + 'OffsetY').pos = i.offsets[1];
                    EDIT_PROP.findComponent(name + 'FrameRate').pos = i.frameRate;
                    EDIT_PROP.findComponent(name + 'FlipX').selected = i.flipX;
                    EDIT_PROP.findComponent(name + 'FlipY').selected = i.flipY;
                    EDIT_PROP.findComponent(name + 'Looped').selected = i.looped;
                    
                    EDIT_PROP.findComponent(name + 'Prefix').onChange = ()->{
                        i.prefix = EDIT_PROP.findComponent(name + 'Prefix').text;
                    };
                    EDIT_PROP.findComponent(name + 'Indices').onChange = ()->{
                        i.frameIndices = NovaUtils.stringToIndices(EDIT_PROP.findComponent(name + 'Indices').text);
                    };
                    EDIT_PROP.findComponent(name + 'OffsetX').onChange = ()->{
                        i.offsets[0] = EDIT_PROP.findComponent(name + 'OffsetX').pos;
                    };
                    EDIT_PROP.findComponent(name + 'OffsetY').onChange = ()->{
                        i.offsets[1] = EDIT_PROP.findComponent(name + 'OffsetY').pos;
                    };
                    EDIT_PROP.findComponent(name + 'FrameRate').onChange = ()->{
                        i.frameRate = EDIT_PROP.findComponent(name + 'FrameRate').pos;
                    };
                    EDIT_PROP.findComponent(name + 'FlipX').onChange = ()->{
                        i.flipX = EDIT_PROP.findComponent(name + 'FlipX').selected;
                    };
                    EDIT_PROP.findComponent(name + 'FlipY').onChange = ()->{
                        i.flipY = EDIT_PROP.findComponent(name + 'FlipY').selected;
                    };
                    EDIT_PROP.findComponent(name + 'Looped').onChange = ()->{
                        i.looped = EDIT_PROP.findComponent(name + 'Looped').selected;
                    };
                }

                for (i in dataToApply.animations) {
                    if (i.name == "idle") {
                        EDIT_PROP.findComponent('ac1').addComponent(RuntimeComponentBuilder.build(Paths.ui("level-editor/parts/idlePart")));
                        applyData('idle', i);
                    } else if (i.name == "confirm") {
                        if (EDIT_PROP.findComponent("hasConfirmAnim").selected) {
                            EDIT_PROP.findComponent('ac1').addComponent(RuntimeComponentBuilder.build(Paths.ui("level-editor/parts/confirmPart")));
                            applyData('confirm', i);
                        }
                    } else if (i.name == "danceLeft") {
                        EDIT_PROP.findComponent('ac1').addComponent(RuntimeComponentBuilder.build(Paths.ui("level-editor/parts/danceLeftPart")));
                        applyData('danceLeft', i);
                    } else if (i.name == "danceRight") {
                        EDIT_PROP.findComponent('ac1').addComponent(RuntimeComponentBuilder.build(Paths.ui("level-editor/parts/danceRightPart")));
                        applyData('danceRight', i);
                    }
                }
            }
            refreshAnimations();

            var alternateCount = 0;
            for (i in SELECTED_PROP.propData.animations) {
                if (i.name == "confirm")
                    EDIT_PROP.findComponent("hasConfirmAnim").selected = true;

                if (i.name == "danceLeft" || i.name == "danceRight") alternateCount++;
            }

            if (alternateCount >= 2)
                EDIT_PROP.findComponent("alternate").selected = true;

            EDIT_PROP.findComponent("assetPath").onChange = ()->{
                dataToApply.assetPath = "storymenu/props/" + EDIT_PROP.findComponent("assetPath").text;
            }

            EDIT_PROP.findComponent("scale").onChange = ()->{
                dataToApply.scale = EDIT_PROP.findComponent("scale").pos;
            }

            EDIT_PROP.findComponent("alpha").onChange = ()->{
                dataToApply.alpha = EDIT_PROP.findComponent("alpha").pos;
            }
            
            EDIT_PROP.findComponent("danceEvery").onChange = ()->{
                dataToApply.danceEvery = EDIT_PROP.findComponent("danceEvery").pos;
            }

            EDIT_PROP.findComponent("offsetX").onChange = ()->{
                dataToApply.offsets[0] = EDIT_PROP.findComponent("offsetX").pos;
            }

            EDIT_PROP.findComponent("offsetY").onChange = ()->{
                dataToApply.offsets[1] = EDIT_PROP.findComponent("offsetY").pos;
            }

            EDIT_PROP.findComponent("isPixel").onChange = ()->{
                dataToApply.isPixel = EDIT_PROP.findComponent("isPixel").selected;
            }

            EDIT_PROP.findComponent('alternate').onChange = ()->{
                if (EDIT_PROP.findComponent('alternate').selected) {
                    removeAnimationFromArray(dataToApply.animations, 'idle');
                    if (!hasAnimationInArray(dataToApply.animations, 'danceRight')) {
                        dataToApply.animations.insert(0, getBlankAnim('danceRight'));
                    }
                    if (!hasAnimationInArray(dataToApply.animations, 'danceLeft')) {
                        dataToApply.animations.insert(0, getBlankAnim('danceLeft'));
                    }
                } else {
                    removeAnimationFromArray(dataToApply.animations, 'danceLeft');
                    removeAnimationFromArray(dataToApply.animations, 'danceRight');
                    if (!hasAnimationInArray(dataToApply.animations, 'idle')) {
                        dataToApply.animations.insert(0, getBlankAnim('idle'));
                    }
                }
                refreshAnimations();
            }

            EDIT_PROP.findComponent("hasConfirmAnim").onChange = ()->{
                if (EDIT_PROP.findComponent("hasConfirmAnim").selected) {
                    if (!hasAnimationInArray(dataToApply.animations, 'confirm')) {
                        dataToApply.animations.push(getBlankAnim('confirm'));
                    }
                }
                // EDIT_PROP.findComponent("confirm").disabled = !EDIT_PROP.findComponent("hasConfirmAnim").selected;
                refreshAnimations();
            }
            
            EDIT_PROP.findComponent("close").onClick = ()->{
                LEVEL_DATA.disabled = false;
                WINDOW_MANAGER.closeWindow(EDIT_PROP);
            }
            
            EDIT_PROP.findComponent("apply").onClick = ()->{
                if (!EDIT_PROP.findComponent("hasConfirmAnim").selected) {
                    removeAnimationFromArray(dataToApply.animations, 'confirm');
                }

                var id = LEVEL_DATA.findComponent("levelProps").selectedItem.id;
                SELECTED_LEVEL._data.props[LEVEL_DATA.findComponent("levelProps").selectedItem.id] = dataToApply;
                LEVEL_DATA.disabled = false;
                WINDOW_MANAGER.closeWindow(EDIT_PROP);
                loadLevel(SELECTED_LEVEL);

                forceSelectProp(id);
            }
        }
        editPropButton.onClick = editPropCallback;

        var levelDropdown = LEVEL_DATA.findComponent("levelDropdown");
        var levelDropdownCallback = ()->{
            if (levelDropdown.selectedItem == null || levelDropdown.selectedItem.text == "Select a Level (Week)") return;
            // -- Get Selected Level Data -- \\
            SELECTED_LEVEL = new Level('week1');
            SELECTED_LEVEL._data = LEVEL_REGISTRY.get(levelDropdown.selectedItem.id);
            loadLevel(SELECTED_LEVEL);

            // -- Set UI To Selected Data -- \\
            LEVEL_DATA.findComponent("levelName").text = SELECTED_LEVEL.getTitle();

            LEVEL_DATA.findComponent("titleAsset").text = SELECTED_LEVEL._data.titleAsset.replace("storymenu/titles/", "") + "";

            LEVEL_DATA.findComponent("backgroundAsset").text = SELECTED_LEVEL._data.background;

            LEVEL_DATA.findComponent("levelSongs").text = SELECTED_LEVEL.getSongs().join(", ");

            LEVEL_DATA.findComponent("levelIsVisible").selected = SELECTED_LEVEL.isVisible();

            LEVEL_DATA.findComponent("levelProps").dataSource.clear();
            var propID = 0;
            for (i in SELECTED_LEVEL._data.props) {
                LEVEL_DATA.findComponent("levelProps").dataSource.add(
                    {
                        text: NovaConverters.capitalize(i.assetPath.split("/").pop()),
                        assetPath: i.assetPath,
                        id: propID
                    }
                );
                propID++;
            }
        }
        levelDropdown.onChange = levelDropdownCallback;

        var levelNameField = LEVEL_DATA.findComponent("levelName");
        var levelNameFieldCallback = ()->{
            SELECTED_LEVEL._data.name = levelNameField.text;
            updateText();
        }
        levelNameField.onChange = levelNameFieldCallback;

        var titleAsset = LEVEL_DATA.findComponent("titleAsset");
        var titleAssetCallback = ()->{
            titleAssetOverlay.visible = false;
            if (titleAsset.text == "") return;
            if (NovaUtils.checkImageExists("storymenu/titles/" + titleAsset.text)) {
                SELECTED_LEVEL._data.titleAsset = "storymenu/titles/" + titleAsset.text;
                updateTitleSprite();
            } else {
                titleAssetOverlay.visible = true;
            }
        }

        titleAsset.onChange = titleAssetCallback;

        titleAssetOverlay = new FunkinSprite(113, 110).makeGraphic(titleAsset.width - 2, titleAsset.height - 2, FlxColor.RED);
        titleAssetOverlay.blend = 0;
        titleAssetOverlay.alpha = 0.5;
        titleAssetOverlay.visible = false;
        LEVEL_DATA.add(titleAssetOverlay);

        var backgroundAssetE = LEVEL_DATA.findComponent("backgroundAsset");
        var backgroundAssetECallback = ()->{
            SELECTED_LEVEL._data.background = backgroundAssetE.text;
            updateLevelBackground();
        }
        backgroundAssetE.onChange = backgroundAssetECallback;

        var backgroundColorPicker = LEVEL_DATA.findComponent("backgroundColorPicker");
        backgroundColorPicker.onChange = ()->{
            backgroundAssetE.text = FlxColor.toWebString(backgroundColorPicker.selectedItem);
        }

        var levelSongs = LEVEL_DATA.findComponent("levelSongs");
        var levelSongsCallback = ()->{
            var songList = levelSongs.text;
            songList = songList.replace(" ", "");
            SELECTED_LEVEL._data.songs = songList.split(",");
            updateText(); 
        }
        levelSongs.onChange = levelSongsCallback;

        var isVisible = LEVEL_DATA.findComponent("levelIsVisible");
        var isVisibleCallback = isVisible.onClick = ()->{
            SELECTED_LEVEL._data.visible = isVisible.selected;
        }

        var levelPropList = LEVEL_DATA.findComponent("levelProps");
        var levelPropListCallback = levelPropList.onClick = ()->{
            for (i in levelProps) {
                if (i.propData.assetPath == levelPropList.selectedItem.assetPath) {
                    SELECTED_PROP = i;
                    break;
                }
            }
        }

        var createProp = LEVEL_DATA.findComponent("createProp");
        var createPropCallback = createProp.onClick = ()->{
            SELECTED_LEVEL._data.props.push(newProp());
            loadLevel(SELECTED_LEVEL);
            forceSelectProp(SELECTED_LEVEL._data.props.length - 1);
        }

        var deleteProp = LEVEL_DATA.findComponent("deleteProp");
        var deletePropCallback = deleteProp.onClick = ()->{
            if (SELECTED_PROP == null) return;
            SELECTED_LEVEL._data.props.remove(SELECTED_LEVEL._data.props[LEVEL_DATA.findComponent("levelProps").selectedItem.id]);
            loadLevel(SELECTED_LEVEL);
            forceSelectProp(SELECTED_LEVEL._data.props.length - 1);
        }

        var first;
        var index = 0;
        for (i in LevelRegistry.instance.listSortedLevelIds()) {
            // if (LevelRegistry.instance.listBaseGameEntryIds().contains(i)) continue;
            var level = new Level(i);
            LEVEL_DATA.findComponent("levelDropdown").dataSource.add({text: level.getTitle(), id: i});
            if (index == 0) first = ()->{
                LEVEL_DATA.findComponent("levelDropdown").selectedItem = {text: level.getTitle(), id: i};
                LEVEL_DATA.findComponent("levelProps").selectedItem = null;
                LEVEL_DATA.findComponent("levelProps").selectedItems = [];
            }; 
            LEVEL_REGISTRY.set(i, level._data);
            index++; 
        }
        new FlxTimer().start(0.01, first);

        
        
    }

    var prev = FlxG.sound.volume;
    var prevMute = FlxG.sound.muted;
    function update(e) {
        super.update(e);        
        get_conductorInUse().update();

        LEVEL_DATA.findComponent("editProp").disabled = SELECTED_PROP == null;
        LEVEL_DATA.findComponent("createProp").disabled = SELECTED_PROP == null;
        LEVEL_DATA.findComponent("deleteProp").disabled = SELECTED_PROP == null;

        if (FlxG.mouse.justReleased) {
            checkWindowOffScreen(LEVEL_DATA);
            checkWindowOffScreen(EDIT_PROP);
        }

        if (prev != FlxG.sound.volume) {
            FlxG.sound.volume = prev;
        }
        if (prevMute != FlxG.sound.muted) {
            FlxG.sound.muted = prevMute;
            FlxG.sound.volume = prev;
        }
        

        if (FlxG.keys.pressed.ENTER && levelProps[1].shouldBop) {
            for (i in levelProps) {
                i.shouldBop = false;
                i.playConfirm();
                new FlxTimer().start(1, ()->i.shouldBop = true);
            }
            FunkinSound.playOnce(Paths.sound('confirmMenu'));
        }

        if (titleAssetSprite != null)
            titleAssetSprite.alpha = SELECTED_LEVEL.isVisible() ? 1 : 0.5;

        for (i in [titleAssetSprite, levelBackground, blackBar, tracklistText, scoreText, levelTitleText].concat(levelProps)) {
            if (i == null) continue;
            i.cameras = [LEVEL_CAMERA];
        }

        /* if (FlxG.keys.justPressed.I) {
            var dialog = new OpenFileDialog();
            dialog.options = {
                readContents: true,
                title: "Open Image File",
                readAsBinary: true,
                extensions: FileDialogTypes.TEXTS
            };
           /*  dialog.onDialogClosed = function(event) {
                if (event.button == DialogButton.OK) {
                    updateTabs(dialog.selectedFiles[0].bytes);
                }
            } * /
            dialog.show();
        } */

        /* if (LEVEL_DATA != null) {
            
        } */
    }

    override function beatHit() {
        super.beatHit();
        var curBeat = get_conductorInUse().currentBeat;

        for (i in levelProps) {
            i.danceEvery *= 2;
            if (i == null) continue;
            if (i.danceEvery > 0 && (curBeat % (i.danceEvery)) == 0) {
                i.dance(i.shouldBop);
            }
            i.danceEvery /= 2;
        }
    }
    override function stepHit(e) {
        super.stepHit(e);
        var curStep = get_conductorInUse().currentStep;

        
    }

    function destroy() {
        super.destroy();
        Cursor.hide();
    }

    function loadLevel(level) {
        for (i in [titleAssetSprite, levelBackground, blackBar, tracklistText, scoreText, levelTitleText, levelProps].concat(levelProps))
            if (members.contains(i))
                remove(i);
        
        LEVEL_DATA.findComponent("levelProps").dataSource.clear();
        var propIndex = 0;
        for (i in level._data.props) {
            LEVEL_DATA.findComponent("levelProps").dataSource.add(
                {
                    text: NovaConverters.capitalize(i.assetPath.split("/").pop()),
                    assetPath: i.assetPath,
                    id: propIndex
                }
            );
            propIndex++;
        }

        levelBackground = level.buildBackground();
        levelBackground.y = MENU_BAR.height + 56;
        
        blackBar = new FunkinSprite(levelBackground.x, 0).makeSolidColor(FlxG.width, Std.int(400 + levelBackground.y), FlxColor.BLACK);
        add(blackBar);
        add(levelBackground);
        
        titleAssetSprite = level.buildTitleGraphic();
        titleAssetSprite.updateHitbox();
        titleAssetSprite.screenCenter();
        titleAssetSprite.y += Std.int(levelBackground.y + levelBackground.height + 10 + MENU_BAR.height)/2;
        titleAssetSprite.y -= 30;
        add(titleAssetSprite);

        tracklistText = new FlxText(FlxG.width * 0.05, levelBackground.x + levelBackground.height + 100 + MENU_BAR.height, 0, "Tracks", 32);
        tracklistText.setFormat('VCR OSD Mono', 32);
        tracklistText.alignment = 'center';
        tracklistText.color = 0xFFE55777;
        add(tracklistText);

        scoreText = new FlxText(Math.max(FullScreenScaleMode.gameNotchSize.x, 10), 10 + MENU_BAR.height, 0, 'HIGH SCORE: XXXXXXXX');
        scoreText.setFormat('VCR OSD Mono', 32);
        add(scoreText);

        levelTitleText = new FlxText(Math.max((FlxG.width * 0.7), FlxG.width - FullScreenScaleMode.gameNotchSize.x), 10 + MENU_BAR.height, 0, level.getTitle());
        levelTitleText.setFormat('VCR OSD Mono', 32, FlxColor.WHITE, 'right');
        levelTitleText.alpha = 0.7;
        levelTitleText.updateHitbox();
        levelTitleText.x = FlxG.width - levelTitleText.width - Math.max(FullScreenScaleMode.gameNotchSize.x, 10);
        add(levelTitleText);

        updateText();
        updateProps();
    }

    function updateText() {
        tracklistText.text = 'TRACKS\n\n';
        tracklistText.text += SELECTED_LEVEL.getSongDisplayNames('normal').join('\n');

        tracklistText.screenCenter(0x01);
        tracklistText.x -= (FlxG.width * 0.35);

        levelTitleText.text = SELECTED_LEVEL.getTitle();
        levelTitleText.updateHitbox();
        levelTitleText.x = FlxG.width - levelTitleText.width - Math.max(FullScreenScaleMode.gameNotchSize.x, 10);

        /* var levelScore:Null<SaveScoreData> = Save.instance.getLevelScore(currentLevelId, currentDifficultyId);
        highScore = levelScore?.score ?? 0; */
        // levelScore.accuracy
    }

    function updateTitleSprite() {
        remove(titleAssetSprite);
        titleAssetSprite = SELECTED_LEVEL.buildTitleGraphic();
        titleAssetSprite.updateHitbox();
        titleAssetSprite.screenCenter();
        titleAssetSprite.y += Std.int(levelBackground.y + levelBackground.height + 10 + MENU_BAR.height)/2;
        titleAssetSprite.y -= 30;
        add(titleAssetSprite);
    }
    
    function updateProps() {
        levelProps = [];
        for (prop in SELECTED_LEVEL.buildProps()) {
            levelProps.push(prop);
        }
        for (i in levelProps) {
            /* i.x += (FullScreenScaleMode.gameCutoutSize.x / 4);
            i.onCreate();
            i.applyData(); */
            i.y += MENU_BAR.height;
            add(i);
            i.onCreate();
        }
    }

    function updateLevelBackground() {
        remove(levelBackground);
        remove(blackBar);
        levelBackground = SELECTED_LEVEL.buildBackground();
        levelBackground.y = MENU_BAR.height + 56;
        
        blackBar = new FunkinSprite(levelBackground.x, 0).makeSolidColor(FlxG.width, Std.int(400 + levelBackground.y), FlxColor.BLACK);
        add(blackBar);
        add(levelBackground);
    }

    function checkWindowOffScreen(window) {
        if (window == null || FlxG.mouse.pressed) return;
        if (window.left < 0)
            window.x = 0;

        if (window.top < 0)
            window.y = 0;

        if (window.left > FlxG.width - window.width)
            window.x = FlxG.width - window.width;

        if (window.top > FlxG.height - window.height)
            window.y = FlxG.height - window.height;
    }

    function getBlankAnim(name) {
        return {
            name: name,
            prefix: '',
            assetPath: '',
            offsets: [0, 0],
            looped: false,
            flipX: false,
            flipY: false,
            frameRate: 24,
            frameIndices: []
        }
    }
    
    function hasAnimationInArray(array, name) {
        var has = false;
        for (i in array) {
            if (i.name == name) has = true;
        }
        return has;
    }

    function removeAnimationFromArray(array, name) {
        for (i in array)
            if (i.name == name) array.remove(i);
    }

    function initStyles() {
        add(RuntimeComponentBuilder.build(Paths.ui("level-editor/styles/main")));
    }

    function newProp() {
        return { 
            assetPath: "prop",
            scale: 1,
            alpha: 1,
            isPixel: false,
            danceEvery: 1,
            offsets: [0, 0],
            animations: [getBlankAnim("idle")]
        }
    }

    function forceSelectProp(index) {
        var id = index;
        SELECTED_PROP = null;
        LEVEL_DATA.findComponent("levelProps").selectedItem = null;
        LEVEL_DATA.findComponent("levelProps").selectedItems = [];
        new FlxTimer().start(0.01, ()->{
            SELECTED_PROP = levelProps[id];
            LEVEL_DATA.findComponent("levelProps").selectedItem = LEVEL_DATA.findComponent("levelProps").dataSource.get(id);
            LEVEL_DATA.findComponent("levelProps").selectedItems = [LEVEL_DATA.findComponent("levelProps").dataSource.get(id)];
        });
    }

    /* function formatJSON(string) {
        string = string.replace()
        return string;
    } */
}